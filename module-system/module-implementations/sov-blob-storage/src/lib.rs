use sov_modules_api::Module;
use sov_modules_macros::ModuleInfo;
use sov_state::{StateValue, WorkingSet};

#[derive(ModuleInfo, Clone)]
pub struct BlobStorage<C: sov_modules_api::Context> {
    /// The address of blob storage module
    /// Note: this is address is generated by the module framework and the corresponding private key is unknown.
    #[address]
    pub(crate) address: C::Address,

    /// Actual storage of blobs
    /// stored this way (DA block number, blob)
    /// TODO: StateVec: https://github.com/Sovereign-Labs/sovereign-sdk/issues/33
    #[state]
    pub(crate) blobs: StateValue<Vec<(u64, Vec<u8>)>>,
}

impl<C: sov_modules_api::Context> BlobStorage<C> {
    pub fn earliest_stored_block_number(
        &self,
        working_set: &mut WorkingSet<C::Storage>,
    ) -> Option<u64> {
        self.blobs
            .get(working_set)
            .and_then(|blobs| blobs.get(0).map(|(block_number, _)| *block_number))
    }

    pub fn store_blob(
        &self,
        block_number: u64,
        blob: Vec<u8>,
        working_set: &mut WorkingSet<C::Storage>,
    ) -> anyhow::Result<()> {
        let mut blobs = self.blobs.get_or_err(working_set)?;
        blobs.push((block_number, blob));
        self.blobs.set(&blobs, working_set);
        Ok(())
    }
}

impl<C: sov_modules_api::Context> Module for BlobStorage<C> {
    type Context = C;
    type Config = ();
}
